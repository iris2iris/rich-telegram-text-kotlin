package iris.tg.rich

/** Created 22.08.2020
 * @author [Ivan Ivanov](https://vk.com/irisism)
 * */
object IrisTelegramRichText {
	private val htmlStrip = Regex("[<>]")
	fun applyEntities2Html(text: String, entities: List<Entity>): String {
		// stripping tags
		val text = text.replace(htmlStrip) {
			when (it.groupValues[0]) {
				"<" -> "&lt;"
				">" -> "&gt;"
				else -> it.groupValues[0]
			}
		}
		if (entities.isEmpty())
			return text
		val items = mutableListOf<Pair<Int, EntityInfo>>()
		for (e in entities) {
			val type = pairs[e.type]?: continue
			items += e.offset to EntityInfo(type.first, e)
			items += (e.offset + e.length) to EntityInfo(type.second, e)
		}
		items.sortBy { it.first }

		val sb = StringBuilder()
		var curPos = 0
		for ((pos, entityInfo) in items) {
			val ch = CharArray(pos - curPos)
			sb.append(text.toCharArray(ch, 0, curPos, pos))
			when (entityInfo.type) {
				EntityType.AnchorStart -> sb.append("<a href=\"").append(entityInfo.entity.data["url"]).append("\">")
				EntityType.PreStart -> {
					sb.append("<pre")
					val lang = entityInfo.entity.data["language"]?.toString()
					if (!lang.isNullOrBlank())
						sb.append(" language=\"").append(lang).append("\"")
					sb.append('>')
				}
				else -> sb.append(entityInfo.type.html)
			}
			curPos = pos
		}
		if (curPos != text.length) {
			val pos = text.length
			val ch = CharArray(pos - curPos)
			sb.append(text.toCharArray(ch, 0, curPos, pos))
		}

		return sb.toString()
	}

	fun applyEntities2Markdown(text: String, entities: List<Entity>): String {
		if (entities.isEmpty())
			return text
		val items = mutableListOf<Pair<Int, EntityInfo>>()
		for (e in entities) {
			val type = pairs[e.type]?: continue
			items += e.offset to EntityInfo(type.first, e)
			items += (e.offset + e.length) to EntityInfo(type.second, e)
		}
		items.sortBy { it.first }

		val sb = StringBuilder()
		var curPos = 0
		for ((pos, entityInfo) in items) {
			val ch = CharArray(pos - curPos)
			sb.append(text.toCharArray(ch, 0, curPos, pos))
			when (entityInfo.type) {
				EntityType.AnchorEnd -> sb.append("](").append(entityInfo.entity.data["url"]).append(')')
				EntityType.PreStart -> {
					sb.append("```")
					val lang = entityInfo.entity.data["language"]?.toString()
					if (!lang.isNullOrBlank())
						sb.append(lang)
				}
				else -> sb.append(entityInfo.type.markdown)
			}
			curPos = pos
		}
		if (curPos != text.length) {
			val pos = text.length
			val ch = CharArray(pos - curPos)
			sb.append(text.toCharArray(ch, 0, curPos, pos))
		}

		return sb.toString()
	}

	class Entity(val type: String, val offset: Int, val length: Int, val data: Map<String, Any?>) {
		override fun toString(): String {
			return "Entity(type='$type', offset=$offset, length=$length, data=$data)"
		}
	}

	class EntityInfo(val type: EntityType, val entity: Entity) {
		override fun toString(): String {
			return "EntityInfo(type=$type, entity=$entity)"
		}
	}

	enum class EntityType(val html: String, val markdown: String = "") {
		BoldStart("<b>", "*"), BoldEnd("</b>", "*"),
		ItalicStart("<i>", "_"), ItalicEnd("</i>", "_"),
		UnderlineStart("<u>", "__"), UnderlineEnd("</u>", "__"),
		StrikethroughStart("<s>", "~"), StrikethroughEnd("</s>", "~"),
		AnchorStart("<a>", "["), AnchorEnd("</a>", "]")
		, CodeStart("<code>", "`"), CodeEnd("</code>", "`")
		, PreStart("<pre>", "```"), PreEnd("</pre>", "```");

		override fun toString(): String {
			return "EntityType(html='$html', markdown='$markdown')"
		}


	}

	private val pairs = mapOf<String, Pair<EntityType, EntityType>>(
		"bold" to (EntityType.BoldStart to EntityType.BoldEnd)
		, "italic" to (EntityType.ItalicStart to EntityType.ItalicEnd)
		, "underline" to (EntityType.UnderlineStart to EntityType.UnderlineEnd)
		, "strikethrough" to (EntityType.StrikethroughStart to EntityType.StrikethroughEnd)
		, "text_link" to (EntityType.AnchorStart to EntityType.AnchorEnd)
		, "code" to (EntityType.CodeStart to EntityType.CodeEnd)
		, "pre" to (EntityType.PreStart to EntityType.PreEnd)
	)
}

// To test features
fun main() {
	val text = """üóì –ü—Ä–∞–≤–∏–ª–∞ –±–µ—Å–µ–¥—ã:
–ë–µ—Å–µ–¥–∞ —Å—Ç—Ä–æ–≥–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ò—Ä–∏—Å–∞, –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é.
 
–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è:
1. –û—Ñ—Ñ—Ç–æ–ø: —Å–∫–∏–¥—ã–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ —Ç–µ–º–µ —á–∞—Ç–∞. 
2. –§–ª—É–¥: –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–±–æ—Ä —Å–º–∞–π–ª–æ–≤, –±—É–∫–≤, —Å—Ç–∏–∫–µ—Ä–æ–≤, —ç–º–æ–¥–∑–∏, –ø–∏—à–µ—Ç–µ –ª–µ—Å—Ç–Ω–∏—Ü–µ–π (–ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É), —Ñ–ª—É–¥ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞.
3. –°–ø–∞–º: –ø–∏–∞—Ä, —Ä–µ–∫–ª–∞–º–∞, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏. –°—é–¥–∞ –∂–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ—Å—å–±–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫/–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –≤–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ —Ç.–ø.
4. –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –ª—ë–≥–∫–æ–≥–æ/–≥—Ä—É–±–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. 
5. –ù–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π/–ø—Ä–∞–≤–∏–ª.
6. –í–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–∑.
7. –†–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–¥–∞–∂–∞ —Ä–ø-–∫–æ–º–∞–Ω–¥. (–Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –≤–∏–ø —Ä–ø –∏ –º—Ä–ø).
8. –ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –¥–µ–≤–∏–∞–Ω—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ —Å—Ä–∞—á–µ–π.
9. –ö–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±–æ–ª—å—à–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: —Ç—Ä–µ—à-–∫–æ–Ω—Ç–µ–Ω—Ç, —à–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç, —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ç.–ø.
10. –û–±—Ö–æ–¥ –±–∞–Ω–∞: –∑–∞–±–∞–Ω–µ–Ω—ã –±—É–¥—É—Ç –≤—Å–µ —Ç–≤–∏–Ω–∫–∏, —Å –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–µ—Ä—à—ë–Ω –æ–±—Ö–æ–¥. 
11. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö –±–æ—Ç–æ–≤ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.
12. –í—ã–∑–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã / –±–µ–∑ —É–≤. –ø—Ä–∏—á–∏–Ω—ã.
13. –ù–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ —Å –æ—Å–æ–±–æ –∫—Ä—É–ø–Ω—ã–º —É—â–µ—Ä–±–æ–º –¥–ª—è –±–µ—Å–µ–¥. (–∫–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤ –º–∏–Ω—É—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä)
14. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å zalgo –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã-/–≤–ª–æ–∂–µ–Ω–∏—è-—É–±–∏–π—Ü—ã.
15. –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã.

–ù–∞—Ä—É—à–µ–Ω–∏—è –≤—ã–¥–∞—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é. yyyy"""

	val entitiesTxt = """{offset=19, length=86, type=code}
{offset=124, length=7, type=bold}
{offset=174, length=5, type=bold}
{offset=304, length=5, type=bold}
{offset=432, length=38, type=bold}
{offset=475, length=54, type=bold}
{offset=533, length=48, type=bold}
{offset=585, length=43, type=bold}
{offset=660, length=53, type=bold}
{offset=717, length=49, type=bold}
{offset=825, length=11, type=bold}
{offset=895, length=71, type=bold}
{offset=971, length=48, type=bold}
{offset=1024, length=68, type=bold}
{offset=1128, length=53, type=bold}
{offset=1186, length=22, type=bold}
{offset=1210, length=46, type=italic}"""

	val reg = Regex("\\{offset=(\\d+), length=(\\d+), type=(\\w+)(.*)\\}")
	val entities = mutableListOf<IrisTelegramRichText.Entity>()
	for (m in reg.findAll(entitiesTxt)) {
		val (_, offset, length, type, other) = m.groupValues
		val otherMap = if (other.isEmpty()) emptyMap<String, Any?>()
		else {
			other.trim(',', ' ').split(',').associate {
				val (key, value) = it.trim().split('=')
				key to value
			}
		}
		entities += IrisTelegramRichText.Entity(type, offset.toInt(), length.toInt(), otherMap)
	}
	val res = IrisTelegramRichText.applyEntities2Markdown(text, entities)
	println("MARKDOWN:")
	println(res)
	println()
	val res2 = IrisTelegramRichText.applyEntities2Html(text, entities)
	println("HTML:")
	println(res2)
}